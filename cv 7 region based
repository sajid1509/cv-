import numpy as np                                                 #8- region based segmentation
import matplotlib.pyplot as plt
from skimage.feature import canny
from skimage import data,morphology,filters
from skimage.color import rgb2gray,label2rgb
import scipy.ndimage as nd
plt.rcParams["figure.figsize"] = (12,8)
from skimage.segmentation import watershed
%matplotlib inline
rocket = data.rocket()
rocket_wh = rgb2gray(rocket)
edges = canny(rocket_wh)
plt.imshow(edges, interpolation='gaussian')
plt.title('Canny detector')
fill_im = nd.binary_fill_holes(edges)
plt.imshow(fill_im)
plt.title('Region Filling')
elevation_map = filters.sobel(rocket_wh)
plt.imshow(elevation_map)
markers = np.zeros_like(rocket_wh, dtype=np.uint) # Change the dtype to integer
markers[rocket_wh < 0.1171875] = 1
markers[rocket_wh > 0.5859375] = 2
plt.imshow(markers)
plt.title('markers')
segmentation =watershed(elevation_map, markers)
plt.imshow(segmentation)
plt.title('Watershed segmentation')
segmentation = nd.binary_fill_holes(segmentation - 1)
label_rock, _ = nd.label(segmentation)
image_label_overlay = label2rgb(label_rock, image=rocket_wh)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(24, 16), sharey=True)
ax1.imshow(rocket_wh)
ax1.contour(segmentation, [0.8], linewidths=1.8, colors='w')
ax2.imshow(image_label_overlay)
margins = dict(left=0.02, right=0.98, bottom=0.05, top=0.95, wspace=0.05, hspace=0.05)
fig.subplots_adjust(**margins)
